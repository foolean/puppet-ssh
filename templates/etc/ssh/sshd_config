<% 
    # Import the functions we will be using
    scope.function_template([File.dirname(__FILE__) + "/functions"])
-%>
# Puppet generated configuration file for ssh running on tcp/<%= port %>
# See the sshd_config(5) manpage for details

# What ports, IPs and protocols we listen for
<%= do_integer( name, 'Port', port ) -%>

# Use these options to restrict which interfaces/protocols sshd will bind to
#ListenAddress ::
#ListenAddress 0.0.0.0
<% listenaddress.sort.each do |address| -%>
<%= do_listenaddress( name, address ) -%>
<% end -%>

# IPv4, IPv6, or both (inet, inet6, any)
<%= do_addressfamily( name, addressfamily ) -%>

# Protocol version to use
<%= do_integer_range( name, "Protocol", protocol, 1, 2 ) -%>

# HostKeys for protocol version 2
<%= do_text( "HostKey", rsakey + suffix ) -%>
<%= do_text( "HostKey", dsakey + suffix ) -%>

# Privilege Separation should be turned on for security
UsePrivilegeSeparation yes

# Ciphers that are permitted
<%= do_ciphers( name, ciphers ) -%>

# File that contains the process ID of the SSH daemon
<%= do_text( 'PidFile', '/var/run/' + sshd_name + suffix + '.pid' ) -%>

# The number of client alive messages which may be sent without
# sshd(8) receiving any messages back from the client.
<%= do_integer( name, 'ClientAliveCountMax', clientalivecountmax ) -%>

# The timeout interval in seconds after which if no data has been received
# from the client, sshd(8) will send a message through the encrypted channel
# to request a response from the client.
<%= do_integer( name, 'ClientAliveInterval', clientaliveinterval ) -%>

# Allow TCP forwarding
<%= do_boolean( name, 'AllowTcpForwarding', allowtcpforwarding ) -%>
<% if allowtcpforwarding -%>
<% permitopen.sort.each do |address| -%>
PermitOpen <%= address %>
<% end -%>
<% end -%>

# Lifetime and size of ephemeral version 1 server key
KeyRegenerationInterval 3600
ServerKeyBits 2048

# Logging
<%= do_syslogfacility( name, syslogfacility ) -%>
<%= do_loglevel( name, log_level ) -%>

# Authentication:
LoginGraceTime 30

<% if permitrootlogin -%>
<%= do_permitrootlogin( name, permitrootlogin ) -%>
<% else -%>
PermitRootLogin no
<% end -%>

StrictModes yes

RSAAuthentication no
<%= do_boolean( name, 'PubkeyAuthentication', pubkeyauthentication ) -%>
<% if authorizedkeysfile -%>
AuthorizedKeysFile      <%= authorizedkeysfile %>
<% else -%>
#AuthorizedKeysFile     %h/.ssh/authorized_keys
<% end -%>

# Don't read the user's ~/.rhosts and ~/.shosts files
IgnoreRhosts yes
# For this to work you will also need host keys in /etc/ssh_known_hosts
RhostsRSAAuthentication no
# similar for protocol version 2
HostbasedAuthentication no
# Uncomment if you don't trust ~/.ssh/known_hosts for RhostsRSAAuthentication
#IgnoreUserKnownHosts yes

# To enable empty passwords, change to yes (NOT RECOMMENDED)
PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
<%= do_boolean( name, 'ChallengeResponseAuthentication', challengresponseauthentication ) -%>

# Change to no to disable tunnelled clear text passwords
<%= do_boolean( name, 'PasswordAuthentication', passwordauthentication ) -%>

# Kerberos options
#KerberosAuthentication no
#KerberosGetAFSToken no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes

<%= do_boolean( name, 'X11Forwarding', x11forwarding ) -%>
X11DisplayOffset 10
<%= do_boolean( name, 'PrintMotd', printmotd ) -%>
<%= do_boolean( name, 'PrintLastLog', printlastlog ) -%>
<%= do_boolean( name, 'TCPKeepAlive', tcpkeepalive ) -%>
#UseLogin no

# Maximum number of open sessions per network connection
<%= do_integer( name, 'MaxSessions', maxsessions ) -%>

MaxStartups <%= maxstartups %>
Banner <%= banner %>

<% if acceptenv -%>
# Allow client to pass locale environment variables
<%= do_acceptenv( name, acceptenv ) -%>
<% end %>
<% if chrootdirectory -%>
Subsystem sftp internal-sftp
ChrootDirectory <%= chrootdirectory %>
<% else -%>
Subsystem sftp <%= sftp_server %>
<% end -%>

<% if forcecommand -%>
# Force the execution of a command
ForceCommand <%= forcecommand %>
<% end -%>

<% if os != 'openbsd' -%>
# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
<%= do_boolean( name, 'UsePAM', usepam ) -%>
<% end -%>
<% if allowusers -%>

# List of users permitted to access this server
AllowUsers<% allowusers.each do |user| -%> <%= user %><% end -%>
<% end %>
<% if allowgroups -%>

# List of groups permitted to access this server
AllowGroups<% allowgroups.each do |group| -%> <%= group %><% end -%>
<% end %>
<% if permitrootlogin == false || denyusers -%>

# List of users NOT permitted to access this server
DenyUsers <% if permitrootlogin == false -%>root <% end -%><% denyusers.sort.each do |user| -%><%= user %> <% end %>
<% end %>
<% if denygroups -%>

# List of groups NOT permitted to access this server
DenyGroups<% denygroups.each do |group| -%> <%= group %><% end -%>
<% end %>

# Match users
<% match_users.sort.map do |string, data| -%>
Match User <%= string %>
<%= process_sshd_config_match_hash(string, data) %>
<% end -%>
